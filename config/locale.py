class Locale:
    def __init__(self, user_lang=None):
        self.user_lang = user_lang  # –¥–æ–±–∞–≤–ª—è–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–∞
        self.translations = {
            "en": {
                "greeting": "Hello! Welcome to the vpn shop!",
                "choose_rate": "Choose a plan",
                "buy_sub": "Buy a subscription",
                "show_sub": "Show subscription",
                "back": "‚¨ÖÔ∏è Back",
                "cancel": "‚ùå Cancel",
                "confirm": "‚úÖ Confirm",
                "rate_selected": "You have selected:",
                "confirm_purchase": "‚úÖ Buy this plan",
                "change_rate": "üîÑ Choose another plan",
                "confirm_question": "Confirm your purchase:",
                "error_loading_rates": "Error loading plans",
                "rate_not_found": "Plan not found",
                "choose_payment": "Choose payment method:",
                "pay_card": "üí≥ Bank Card",
                "pay_crypto": "‚Çø Cryptocurrency",
                "pay_stars": "‚≠ê Stars",
                "sub": "Subscription:",
                "active": "‚úÖ Active",
                "expired": "‚ùå Expired",
                "no_subscription": "You don't have an active subscription",
                "loading": "‚è≥ Loading...",
                "success": "‚úÖ Success!",
                "error": "‚ùå Error",
                "try_again": "üîÑ Try again",
                "GB": "GB",
                "sub_url": "Subscription url",
                "traffic_used": "Traffic used",
                "traffic_limit": "Traffic limit",
                "status": "Status",
                "topup": "Top-up ballance",
                "info_ballance": "Your ballance:",
                "buy_rate": "Buy rate:",
                "rate_value": "Price:",
                "rate_description": "Description",
                "rate_period": "Period:",
                "payment_description": "VPN subscription payment",
                "thanks_for_purchase": "Thanks for purchase!",
                "enter_amount": "Enter amount to top up (in RUB):",
                "invalid_amount": "Invalid amount",
                "amount_too_large": "Amount is too large",
                "invalid_amount_format": "Invalid amount format",
                "payment_created": "Payment created",
                "amount": "Amount",
                "expires_in": "Expires in 1 hour",
                "pay_by_this_link": "Pay by this link",
                "payment_creation_error": "Payment creation error",
                "user_not_found": "User not found"
            },
            "ru": {
                "greeting": "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω vpn!",
                "choose_rate": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ",
                "buy_sub": "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                "show_sub": "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                "cancel": "‚ùå –û—Ç–º–µ–Ω–∞",
                "confirm": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                "rate_selected": "–í—ã –≤—ã–±—Ä–∞–ª–∏:",
                "confirm_purchase": "‚úÖ –ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ",
                "change_rate": "üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ",
                "confirm_question": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:",
                "error_loading_rates": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤",
                "rate_not_found": "–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "choose_payment": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                "pay_card": "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
                "pay_crypto": "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
                "pay_stars": "‚≠ê –ó–≤–µ–∑–¥—ã",
                "active": "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞",
                "expires": "‚ùå –ò—Å—Ç–µ–∫–ª–∞",
                "no_subscription": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                "loading": "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...",
                "success": "‚úÖ –£—Å–ø–µ—à–Ω–æ!",
                "error": "‚ùå –û—à–∏–±–∫–∞",
                "try_again": "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                "GB": "–ì–ë",
                "sub": "–ü–æ–¥–ø–∏—Å–∫–∞",
                "sub_url": "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É",
                "traffic_used": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ",
                "traffic_limit": "–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞",
                "status": "–°—Ç–∞—Ç—É—Å",
                "topup": "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                "info_ballance": "–í–∞—à –±–∞–ª–∞–Ω—Å:",
                "buy_rate": "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ:",
                "rate_value": "–°—Ç–æ–∏–º–æ—Å—Ç—å:",
                "rate_description": "–û–ø–∏—Å–∞–Ω–∏–µ:",
                "rate_period": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
                "payment_description": "–û–ø–ª–∞—Ç–∞ VPN –ø–æ–¥–ø–∏—Å–∫–∏",
                "thanks_for_purchase": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                "enter_amount": "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):",
                "invalid_amount": "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞",
                "amount_too_large": "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞",
                "invalid_amount_format": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã",
                "payment_created": "–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω",
                "amount": "–°—É–º–º–∞",
                "expires_in": "–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 —á–∞—Å",
                "pay_by_this_link": "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ",
                "payment_creation_error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞",
                "user_not_found": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            },
        }

    def get_language(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫"""
        return self.user_lang or "en"
    
    def set_language(self, lang):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫"""
        self.user_lang = lang

    def get(self, key, message=None):
        user_lang = "en"

        if self.user_lang:
            user_lang = self.user_lang
        elif message:
            if hasattr(message, "message") and hasattr(message.message, "from_user"):
                user_lang = getattr(message.message.from_user, "language_code", "en")
            elif hasattr(message, "from_user") and hasattr(
                message.from_user, "language_code"
            ):
                user_lang = message.from_user.language_code

        translations = self.translations.get(user_lang, self.translations["en"])
        return translations.get(key, key)

    def add_translation(self, lang: str, key: str, value: str):
        if lang not in self.translations:
            self.translations[lang] = {}
        self.translations[lang][key] = value

    def get_supported_languages(self):
        return list(self.translations.keys())

    def get_all_keys(self):
        all_keys = set()
        for lang_dict in self.translations.values():
            all_keys.update(lang_dict.keys())
        return sorted(list(all_keys))